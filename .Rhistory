suumary(y)
summary(y)
table(y)
table(y, useNA = "ifany")
y <- c("aa", "bb", "cc", NA, "ee", NA)
table(y)
table(y, useNA = "ifany")
is.na(x)
sum(is.na(x))
is.na(y)
sum(is.na(y))
sum(!is.na(y))
v1 <- c("aa", "bb", "cc", "aa", "bb", "cc")
v2 <- c("u1", "u1", "u2", "u2", "u3", "u3")
table(v1)
table(v2)
table(v1, v2)
View(data)
rm(y)
rm(v2)
rm(list = ls())
x = c(1,2,NA)
as.character(x)
as.integer(as.character(x))
?complete.cases
x
complete.cases(x)
is.na(x)
x = c(1,2,3)
y <- c(4,5,6)
d <- data.frame(x, y)
d
d
d[1,1]
d[1,2]
d[3,2]
d[2,]
d[,2]
> x = c(1,2,NA)
> y <- c(4,5,6)
> d <- data.frame(x, y)
x = c(1,2,3) y <- c(4,5,6)
> d <- data.frame(x, y)
?isNA
?isna
is.numeric(x)
x <- c(1,2,3,NA)
x
is.numeric(x)
is.na(x)
x <- c(1,2,"3")
x
is.numeric(x)
is.character(x)
x <- c(1,2,"a")
x
x
rm(list = ls())
setwd("/Users/cinyee/Desktop/Stevens/2020spring/513/HW")
data <- read.csv("breast-cancer-wisconsin.data.csv")
View(data)
# I.Summarizing each column (e.g. min, max, mean )
summary(data)
x <- c(1,2,3,4"na")
x <- c(1,2,3,4, NA)
summary(x)
data$F6<-as.integer(as.character(data$F6))
data[!complete.cases(data),]
data[is.na(data),]
rm(x)
sumColum <- summary(data)
rm(list = ls())
setwd("/Users/cinyee/Desktop/Stevens/2020spring/513/HW")
data <- read.csv("breast-cancer-wisconsin.data.csv")
View(data)
# I.Summarizing each column (e.g. min, max, mean )
summary(data)
data[is.na(data$F6),]
data$F6<-as.integer(as.character(data$F6))
data[!complete.cases(data),]
data[is.na(data$F6),]
data[is.na(data$F6),]
data[is.na(data$F6),]
data[is.na(data$F6),]
data <- read.csv("breast-cancer-wisconsin.data.csv")
summary(data$F6)
str(data)
print(data$F6)
print(as.character(data$F6))
print(as.numeric(as.character(data$F6)))
print(as.numeric(data$F6))
?""
is.na(data$F6)
data$F6[which(data$F6 == ?)]
data$F6[which(data$F6 == "?")]
rm(list = ls())
setwd("/Users/cinyee/Desktop/Stevens/2020spring/513/HW")
data <- read.csv("breast-cancer-wisconsin.data.csv")
View(data)
# I.Summarizing each column (e.g. min, max, mean )
summary(data)
# II.Identifying missing values
# only F6 has missing value
data$F6 <- as.numeric(as.character(data$F6))
data[is.na(data$F6),]
?na.rm
?na.rm =
=
x <- c(1,2,3,NA)
x
mean(x)
mean(x, na.rm= TRUE)
mean(x, na.rm= FALSE)
mean(x, na.rm= TRUE)
TRUE
FALSE
true
flase
summary(data)
rm(list = ls())
setwd("/Users/cinyee/Desktop/Stevens/2020spring/513/HW")
data <- read.csv("breast-cancer-wisconsin.data.csv")
View(data)
summary(data)
# only F6 has missing value
data$F6 <- as.numeric(as.character(data$F6))
data[is.na(data$F6),]
data$F6[is.na(data$F6)] <- mean(data$F6, na.rm = TRUE)
summary(data)
data$F6 <- as.numeric(as.character(data$F6))
data[is.na(data$F6),]
summary(data)
# III.Replacing the missing values with the “mean” of the column.
data$F6[is.na(data$F6)] <- mean(data$F6, na.rm = TRUE)
summary(data)
# II.Identifying missing values
# only F6 has missing value
data$F6 <- as.numeric(as.character(data$F6))
data[is.na(data$F6),]
summary(data)
rm(list = ls())
# 1-Load the “breast-cancer-wisconsin.data.csv” from canvas into R and perform the EDA analysis by:
setwd("/Users/cinyee/Desktop/Stevens/2020spring/513/HW")
data <- read.csv("breast-cancer-wisconsin.data.csv")
View(data)
# I.Summarizing each column (e.g. min, max, mean )
summary(data)
# II.Identifying missing values
# only F6 has missing value
data$F6 <- as.numeric(as.character(data$F6))
data[is.na(data$F6),]
summary(data)
# III.Replacing the missing values with the “mean” of the column.
data$F6[is.na(data$F6)] <- mean(data$F6, na.rm = TRUE)
summary(data)
data.frame(tableOfClass, tableOfF6)
tableOfClass <- table(data$Class)
tableOfF6 <- table(data$F6)
data.frame(tableOfClass, tableOfF6)
tableOfClass <- table(data$Class)
# IV.Displaying the frequency table of “Class” vs. F6
tableOfClass <- table(data$Class)
?table
?as.data.frame
v1 <- c('a','b','c','a','b','c')
v2 <- c('u','u','v',)
v2 <- c('u','u','v','v','w','w')
table(v1)
table(v2)
table(v1, v2)
tableOfClass <- table(data$Class)
tableOfF6 <- table(data$F6)
data.frame(tableOfClass, tableOfF6)
table(v1)
t1 <- table(v1)
t1
t2 <- table(v2)
t2
data.frame(t1, t2)
table(data$Class, table$F6)
table(data$Class, data$F6)
?library
?library(plyr)
?plot
# V.Displaying the scatter plot of F1 to F6, one pair at a time
x <- 1:10
x
for(i in 1:10){
print(x[i])
}
# V.Displaying the scatter plot of F1 to F6, one pair at a time
x <- 91:100
for(i in 1:10){
print(x[i])
}
for(i in 1:5){
print(x[i])
}
for(i in x){
print(i)
}
for(i in 1:10){
print(x[i])
}
y <- 191:200
y <- 191:195
for(i in 1:10){
for(j in 1:5){
print(x[i] + y[j])
}
}
paste0('a', 2)
for(i in 2:6){
for(j in (i + 1):7){
plot(data[ , i],
data[ , j],
main = paste0("Scatter plot of F", i - 1, " and F", j - 1),
xlab = paste0("F", i - 1),
ylab = paste0("F", j - 1))
}
}
?hist
?boxplot
# VI.Show histogram box plot for columns F7 to F9
?hist
?boxplot
for(i in 8:10){
hist(data[ , i],
main = paste0("Frequency Histogram of F", i - 1),
xlab = paste0("F", i - 1))
}
for(i in 8:10){
hist(data[ , i],
main = paste0("Frequency Histogram of F", i - 1),
xlab = paste0("F", i - 1),
ylim=c(0,600))
}
for(i in 8:10){
hist(data[ , i],
main = paste0("Frequency Histogram of F", i - 1),
xlab = paste0("F", i - 1),
xlim = c(0,10),
ylim = c(0,600))
}
for(i in 8:10){
hist(data[ , i],
main = paste0("Frequency Histogram of F", i - 1),
xlab = paste0("F", i - 1),
xlim = c(1,10),
ylim = c(0,650))
}
for(i in 8:10){
hist(data[ , i],
main = paste0("Frequency Histogram of F", i - 1),
xlab = paste0("F", i - 1),
xlim = c(1,10),
ylim = c(0,700))
}
for(i in 8:10){
hist(data[ , i],
main = paste0("Frequency Histogram of F", i - 1),
xlab = paste0("F", i - 1),
xlim = c(1,10),
ylim = c(0,400 + (i - 8) * 150))
}
for(i in 8:10){
hist(data[ , i],
main = paste0("Frequency Histogram of F", i - 1),
xlab = paste0("F", i - 1),
xlim = c(1,11),
ylim = c(0,400 + (i - 8) * 150))
}
for(i in 8:10){
hist(data[ , i],
main = paste0("Frequency Histogram of F", i - 1),
xlab = paste0("F", i - 1),
xlim = c(0,10),
ylim = c(0,400 + (i - 8) * 150))
}
boxplot(F7~F8,data=data, main="Box Plot for F7 and F8",
xlab="F7", ylab="F8")
boxplot(F8~F9,data=data, main="Box Plot for F8 and F9",
xlab="F8", ylab="F9")
boxplot(data$F7,data$F8,data$F9,main="boxplots for F7 to F9",names=c("F7","F8","F9"))
for(i in 8:10){
hist(data[ , i],
main = paste0("Frequency Histogram of F", i - 1),
xlab = paste0("F", i - 1),
xlim = c(0,10),
ylim = c(0,400 + (i - 8) * 150))
boxplot(data[ , i],
main = paste0("Box plot for F", i - 1),
xlab = paste0("F", i - 1))
}
rm(list = ls())
data <- read.csv("breast-cancer-wisconsin.data.csv")
View(data)
data[data == "?"]
data[data == "?", ]
data[data == "?"]
na.omit(data)
View(data)
summary(data)
data[data == "?"] <- NA
na.omit(data)
View(data)
summary(data)
na.omit(data)
View(data)
data <- read.csv("breast-cancer-wisconsin.data.csv")
data[data == "?"] <- NA
View(data)
na.omit(data)
data <- na.omit(data)
rm(list = ls())
setwd("/Users/cinyee/Desktop/Stevens/2020spring/513/HW")
data <- read.csv("breast-cancer-wisconsin.data.csv")
View(data)
# I.Summarizing each column (e.g. min, max, mean )
summary(data)
# II.Identifying missing values
# only F6 has missing value
data$F6 <- as.numeric(as.character(data$F6))
data[is.na(data$F6),]
summary(data)
# III.Replacing the missing values with the “mean” of the column.
data$F6[is.na(data$F6)] <- mean(data$F6, na.rm = TRUE)
summary(data)
# IV.Displaying the frequency table of “Class” vs. F6
table(data$Class, data$F6)
# V.Displaying the scatter plot of F1 to F6, one pair at a time
for(i in 2:6){
for(j in (i + 1):7){
plot(data[ , i],
data[ , j],
main = paste0("Scatter plot of F", i - 1, " and F", j - 1),
xlab = paste0("F", i - 1),
ylab = paste0("F", j - 1))
}
}
# VI.Show histogram and box plot for columns F7 to F9
for(i in 8:10){
hist(data[ , i],
main = paste0("Frequency Histogram of F", i - 1),
xlab = paste0("F", i - 1),
xlim = c(0,10),
ylim = c(0,400 + (i - 8) * 150))
boxplot(data[ , i],
main = paste0("Box plot for F", i - 1),
xlab = paste0("F", i - 1))
}
rm(list = ls())
data <- read.csv("breast-cancer-wisconsin.data.csv")
View(data)
data[data == "?"] <- NA
data <- na.omit(data)
View(data)
summary(data)
# Xinyi Zhao  10451738
# CS513 HW3
rm(list = ls())
# 1-Load the “breast-cancer-wisconsin.data.csv” from canvas into R and perform the EDA analysis by:
setwd("/Users/cinyee/Desktop/Stevens/2020spring/513/HW")
data <- read.csv("breast-cancer-wisconsin.data.csv")
View(data)
# Xinyi Zhao  10451738
# CS513 HW3
rm(list = ls())
setwd("/Users/cinyee/Desktop/Stevens/2020spring/513/HW")
data <- read.csv("breast-cancer-wisconsin.data.csv")
View(data)
# Use the knn methodology (k=3,5 and 10) to develop a classification models for the Diagnosis.
data[data == "?"] <- NA
data <- na.omit(data)
data <- data[ , -1]
View(data)
x <- c('a', 'a', 'b', 'c')
str(x)
y <- as.factor(x)
str(y)
x <- c(2,2,2,4,4,2,4)
str(x)
y <- as.factor(x)
str(y)
rm(list = ls())
setwd("/Users/cinyee/Desktop/Stevens/2020spring/513/HW")
data <- read.csv("breast-cancer-wisconsin.data.csv")
View(data)
# Use the knn methodology (k=3,5 and 10) to develop a classification models for the Diagnosis.
# Make sure your categories are represented by the “factor” data type in R
# and delete the rows with missing value.
data[data == "?"] <- NA
data <- na.omit(data)
data <- data[ , -1]
data$Class<-as.factor(data$Class)
levels(data$Class)<-c("benign","malignant")
summary(data)
View(data)
data[data == "?"] <- NA
data <- na.omit(data)
data <- data[ , -1]
data$F6 <- as.integer(as.character(data$F6))
data$Class<-as.factor(data$Class)
levels(data$Class)<-c("benign","malignant")
summary(data)
View(data)
?sample
?nrow
x <- 1:10
x
sample(x, 7)
x <- data.frame(1:100, 101:200)
x
nrow(x)
sample(nrow(x), 0.7*nrow(x))
my_select <- sample(nrow(x), 0.7*nrow(x))
x[my_select,]
x_selected_70p <- x[my_select,]
nrow(x)
nrow(x_selected_70p)
x <- data.frame(1:3, 6:9)
x
x <- data.frame(1:3, 6:8)
x
x[1,]
x[1:2,]
x[c(1,3),]
?kknn
?library(caret)
library(kknn)
library(caret)
installed.packages()
library(kknn)
library(caret)
?kknn
install.packages(c("caret", "kknn"))
library(caret)
library(kknn)
install.packages(c("kknn", "caret"))
library(kknn)
library(caret)
?kknn
?caret
?fitted
library(kknn)
# k = 3
predict_k3 <- kknn(formula = Class ~ ., training_data, test_data, k = 3, kernel = "rectangular")
fit <- fitted(predict_k3)
conf_matrix <- table(test$Class, fit)
confusionMatrix(conf_matrix)
# Use 30% test 70% training data.
selected_index <- sample(nrow(data), as.integer(nrow(data) * 0.7))
training_data <- data[selected_index,]
test_data <- data[-selected_index,]
# Use the knn methodology (k=3,5 and 10) to develop a classification models for the Diagnosis.
library(kknn)
# k = 3
predict_k3 <- kknn(formula = Class ~ ., training_data, test_data, k = 3, kernel = "rectangular")
fit <- fitted(predict_k3)
conf_matrix <- table(test$Class, fit)
confusionMatrix(conf_matrix)
# Use 30% test 70% training data.
selected_index <- sample(nrow(data), as.integer(nrow(data) * 0.7))
training_data <- data[selected_index,]
test_data <- data[-selected_index,]
# Use the knn methodology (k=3,5 and 10) to develop a classification models for the Diagnosis.
library(kknn)
# k = 3
predict_k3 <- kknn(formula = Class ~ ., training_data, test_data, k = 3, kernel = "rectangular")
fit <- fitted(predict_k3)
conf_matrix <- table(test_data$Class, fit)
confusionMatrix(conf_matrix)
install.packages("e1071")
# Use 30% test 70% training data.
selected_index <- sample(nrow(data), as.integer(nrow(data) * 0.7))
training_data <- data[selected_index,]
test_data <- data[-selected_index,]
# Use the knn methodology (k=3,5 and 10) to develop a classification models for the Diagnosis.
library(kknn)
library(e1071)
# k = 3
predict_k3 <- kknn(formula = Class ~ ., training_data, test_data, k = 3, kernel = "rectangular")
fit <- fitted(predict_k3)
conf_matrix <- table(test_data$Class, fit)
confusionMatrix(conf_matrix)
?confusionMatrix
library(kknn)
library(e1071)
library(caret)
# k = 3
predict_k3 <- kknn(formula = Class ~ ., training_data, test_data, k = 3, kernel = "rectangular")
fit <- fitted(predict_k3)
conf_matrix <- table(test_data$Class, fit)
confusionMatrix(conf_matrix)
library(kknn)
library(e1071)
library(caret)
# k = 3
knn_k3 <- kknn(formula = Class ~ ., training_data, test_data, k = 3, kernel = "rectangular")
fit <- fitted(knn_k3)
conf_matrix <- table(test_data$Class, fit)
confusionMatrix(conf_matrix)
# k = 5
knn_k5 <- kknn(formula = Class ~ ., training_data, test_data, k = 5, kernel = "rectangular")
fit <- fitted(knn_k5)
conf_matrix <- table(test_data$Class, fit)
confusionMatrix(conf_matrix)
# k = 10
knn_k10 <- kknn(formula = Class ~ ., training_data, test_data, k = 10, kernel = "rectangular")
fit <- fitted(knn_k10)
conf_matrix <- table(test_data$Class, fit)
confusionMatrix(conf_matrix)
